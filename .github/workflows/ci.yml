name: CI

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/docs.yml'
      - '.github/workflows/release.yml'
      - '.github/workflows/codeql.yml'
      - 'mkdocs.yml'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/docs.yml'
      - '.github/workflows/release.yml'
      - '.github/workflows/codeql.yml'
      - 'mkdocs.yml'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Enable debug logging'
        required: false
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write
  actions: read

env:
  PYTHON_VERSION: '3.13'
  UV_VERSION: '0.4.18'
  UV_CACHE_DIR: ~/.cache/uv
  PYTHONUNBUFFERED: '1'
  FORCE_COLOR: '1'

jobs:
  # ============================================================================
  # 🚀 Setup Job - Prepare dependencies and share via artifacts
  # ============================================================================

  setup-environment:
    name: 📦 Setup Environment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🔑 Generate cache key
        id: cache-key
        run: |
          echo "key=deps-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}" >> "$GITHUB_OUTPUT"

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock

      - name: 🔧 Install all dependencies
        run: |
          uv sync --frozen --all-extras
          echo "Dependencies installed"

      - name: 📤 Upload virtual environment as artifact
        uses: actions/upload-artifact@v4
        with:
          name: venv-${{ runner.os }}-py${{ env.PYTHON_VERSION }}
          path: |
            .venv
            ~/.cache/uv
          retention-days: 1
          compression-level: 1  # Faster compression for ephemeral artifacts

  # ============================================================================
  # 🎯 Quality Gates - Using Matrix Strategy for Parallel Execution
  # ============================================================================

  quality-checks:
    name: ${{ matrix.check.emoji }} ${{ matrix.check.name }}
    needs: setup-environment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        check:
          - id: ruff-lint
            name: Ruff Linting
            command: ruff check src/ tests/ --output-format=github
            emoji: 🎨
          - id: ruff-format
            name: Ruff Formatting
            command: ruff format --check src/ tests/ --diff
            emoji: 🖌️
          - id: mypy
            name: Type Checking
            command: mypy src/ --show-column-numbers --show-error-context --pretty
            emoji: 🔍
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: false  # We'll use artifacts instead

      - name: 📥 Download virtual environment
        uses: actions/download-artifact@v5
        with:
          name: venv-${{ runner.os }}-py${{ env.PYTHON_VERSION }}

      - name: ${{ matrix.check.emoji }} Run ${{ matrix.check.name }}
        id: check
        run: uv run ${{ matrix.check.command }}

      - name: 📊 Generate report for mypy
        if: matrix.check.id == 'mypy' && failure()
        run: |
          uv run mypy src/ --html-report mypy-report --any-exprs-report mypy-report || true

      - name: 📤 Upload artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.check.id }}-results
          path: mypy-report/
          if-no-files-found: ignore
          retention-days: 7

  # ============================================================================
  # 🛡️ Security Scanning - Parallelized with Matrix Strategy
  # ============================================================================

  security-scan:
    name: 🛡️ ${{ matrix.scan.name }}
    needs: setup-environment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        scan:
          - id: bandit
            name: Bandit Security
            command: |
              uv run bandit -r src/ -ll -f json -o bandit-report.json || true
              uv run bandit -r src/ -ll
          - id: secrets
            name: Secrets Detection
            command: |
              uv run detect-secrets scan --baseline .secrets.baseline
              if uv run detect-secrets scan --baseline .secrets.baseline | grep -q "no secrets detected"; then
                echo "✅ No secrets detected"
              else
                echo "⚠️ Potential secrets detected - please review .secrets.baseline"
              fi
          - id: dependencies
            name: Dependency Audit
            command: |
              uv pip compile pyproject.toml -o requirements.txt
              uv run pip-audit -r requirements.txt --desc || true
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Required for secret detection

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: false

      - name: 📥 Download virtual environment
        uses: actions/download-artifact@v5
        with:
          name: venv-${{ runner.os }}-py${{ env.PYTHON_VERSION }}

      - name: 🔒 Run ${{ matrix.scan.name }}
        run: ${{ matrix.scan.command }}

      - name: 📊 Upload security reports
        if: matrix.scan.id == 'bandit' || matrix.scan.id == 'dependencies'
        uses: actions/upload-artifact@v4
        with:
          name: security-${{ matrix.scan.id }}-report
          path: |
            bandit-report.json
            requirements.txt
          if-no-files-found: ignore
          retention-days: 7

  # ============================================================================
  # 🧪 Testing Matrix - Runs in parallel with quality checks
  # ============================================================================

  test-matrix:
    name: 🧪${{ matrix.os-emoji }} ${{ matrix.os-name }} • ${{ matrix.arch }} • Py${{ matrix.python }}
    needs: setup-environment  # Only needs setup, not quality checks
    strategy:
      fail-fast: false
      matrix:
        include:
          # x86_64 platforms
          - os: ubuntu-latest
            os-name: Linux
            os-emoji: 🐧
            arch: x64
            python: '3.13'
            coverage: true
          - os: windows-latest
            os-name: Windows
            os-emoji: 🪟
            arch: x64
            python: '3.13'
            coverage: false
          - os: macos-13
            os-name: macOS
            os-emoji: 🍎
            arch: x64
            python: '3.13'
            coverage: false
          # ARM platforms
          - os: macos-latest
            os-name: macOS
            os-emoji: 🍎
            arch: arm64
            python: '3.13'
            coverage: false
          - os: ubuntu-24.04-arm
            os-name: Linux
            os-emoji: 🐧
            arch: arm64
            python: '3.13'
            coverage: false
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🐍 Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock

      - name: 🎥 Setup FFmpeg
        uses: ./.github/actions/setup-ffmpeg

      - name: 🔧 Install dependencies
        run: uv sync --frozen --all-extras

      - name: 🧪 Run tests with coverage
        if: matrix.coverage
        shell: bash
        run: |
          uv run pytest tests/ \
            --cov=src/media_audit \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing:skip-covered \
            --junitxml=junit.xml \
            -v

      - name: 🧪 Run tests without coverage
        if: '!matrix.coverage'
        shell: bash
        run: |
          uv run pytest tests/ \
            --junitxml=junit.xml \
            -v

      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.arch }}-py${{ matrix.python }}
          path: |
            junit.xml
            htmlcov/
            coverage.xml
          if-no-files-found: ignore
          retention-days: 7

      - name: 📈 Coverage report
        if: matrix.coverage
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.os }}-py${{ matrix.python }}
          fail_ci_if_error: false
          verbose: true

  # ============================================================================
  # 🏗️ Build Verification - Runs in parallel with quality checks
  # ============================================================================

  build-package:
    name: 📦 Build Distribution
    needs: setup-environment  # Only needs setup, runs in parallel with quality checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: false

      - name: 📥 Download virtual environment
        uses: actions/download-artifact@v5
        with:
          name: venv-${{ runner.os }}-py${{ env.PYTHON_VERSION }}

      - name: 🏗️ Build package
        run: |
          uv build
          ls -la dist/

      - name: 🔍 Check package with twine
        run: |
          uv pip install twine
          uv run twine check dist/*

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distribution-packages
          path: dist/
          retention-days: 7

  # ============================================================================
  # 🎯 Pre-commit Validation
  # ============================================================================

  pre-commit-check:
    name: 🪝 Pre-commit Hooks
    needs: setup-environment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: false

      - name: 📥 Download virtual environment
        uses: actions/download-artifact@v5
        with:
          name: venv-${{ runner.os }}-py${{ env.PYTHON_VERSION }}

      - name: 💾 Cache pre-commit environments
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: 🪝 Run pre-commit hooks
        env:
          SKIP: prettier,markdownlint,cspell,markdown-link-check,mkdocs-build,pytest
        run: |
          uv run pre-commit run --all-files --show-diff-on-failure --color=always

  # ============================================================================
  # 📊 Results Summary
  # ============================================================================

  ci-summary:
    name: ✅ CI Summary
    if: always()
    needs:
      - quality-checks
      - security-scan
      - test-matrix
      - build-package
      - pre-commit-check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 📊 Check job results
        id: check-results
        run: |
          # Function to check job result
          check_job() {
            local job_name="$1"
            local job_result="$2"
            local emoji="$3"

            if [ "$job_result" == "success" ]; then
              echo "$emoji ✅ $job_name: Success"
              return 0
            elif [ "$job_result" == "skipped" ]; then
              echo "$emoji ⏭️ $job_name: Skipped"
              return 0
            else
              echo "$emoji ❌ $job_name: Failed"
              return 1
            fi
          }

          # Initialize success flag
          all_success=true

          # Check all job results
          echo "## 📊 CI Pipeline Results"
          echo ""
          echo "### 🎯 Quality & Security"
          check_job "Quality Checks" "${{ needs.quality-checks.result }}" "🎯" || all_success=false
          check_job "Security Scan" "${{ needs.security-scan.result }}" "🛡️" || all_success=false
          echo ""
          echo "### 🧪 Testing & Build"
          check_job "Test Suite" "${{ needs.test-matrix.result }}" "🧪" || all_success=false
          check_job "Package Build" "${{ needs.build-package.result }}" "📦" || all_success=false
          echo ""
          echo "### 🪝 Validation"
          check_job "Pre-commit Hooks" "${{ needs.pre-commit-check.result }}" "🪝" || all_success=false
          echo ""

          # Set overall status
          if [ "$all_success" = true ]; then
            echo "## ✅ All checks passed successfully!"
            echo "ci_status=success" >> "$GITHUB_OUTPUT"
          else
            echo "## ❌ Some checks failed. Please review the results above."
            echo "ci_status=failure" >> "$GITHUB_OUTPUT"
            exit 1
          fi

      - name: 💬 Comment PR results
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: ci-results
          message: |
            ## 🚀 CI Pipeline Results

            Run: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            | Check | Status |
            |-------|--------|
            | 🎯 Quality Checks | ${{ needs.quality-checks.result == 'success' && '✅' || needs.quality-checks.result == 'skipped' && '⏭️' || '❌' }} |
            | 🛡️ Security Scan | ${{ needs.security-scan.result == 'success' && '✅' || needs.security-scan.result == 'skipped' && '⏭️' || '❌' }} |
            | 🧪 Test Suite | ${{ needs.test-matrix.result == 'success' && '✅' || needs.test-matrix.result == 'skipped' && '⏭️' || '❌' }} |
            | 📦 Package Build | ${{ needs.build-package.result == 'success' && '✅' || needs.build-package.result == 'skipped' && '⏭️' || '❌' }} |
            | 🪝 Pre-commit Hooks | ${{ needs.pre-commit-check.result == 'success' && '✅' || needs.pre-commit-check.result == 'skipped' && '⏭️' || '❌' }} |

            ${{ steps.check-results.outputs.ci_status == 'success' && '### ✅ All checks passed successfully!' || '### ❌ Some checks require attention' }}

      - name: 🎉 Success notification
        if: steps.check-results.outputs.ci_status == 'success'
        run: |
          echo "::notice::✅ All CI checks passed successfully!"

      - name: ⚠️ Failure notification
        if: steps.check-results.outputs.ci_status == 'failure'
        run: |
          echo "::error::❌ CI pipeline failed. Please check the job results for details."
          exit 1
