name: CI

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/docs.yml'
      - '.github/workflows/release.yml'
      - '.github/workflows/codeql.yml'
      - 'mkdocs.yml'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/docs.yml'
      - '.github/workflows/release.yml'
      - '.github/workflows/codeql.yml'
      - 'mkdocs.yml'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Enable debug logging'
        required: false
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write
  actions: read

env:
  PYTHON_VERSION: '3.13'
  UV_VERSION: '0.4.18'
  UV_CACHE_DIR: ~/.cache/uv
  PYTHONUNBUFFERED: '1'
  FORCE_COLOR: '1'

jobs:
  # ============================================================================
  # 🎯 Quality Gates - First line of defense
  # ============================================================================

  quality-ruff-lint:
    name: 🎯 Quality • Ruff Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: '**/pyproject.toml'

      - name: 🔧 Install dependencies
        run: |
          uv sync --frozen --all-extras
          echo "::group::Installed packages"
          uv pip list
          echo "::endgroup::"

      - name: 🎨 Run Ruff linting
        id: ruff-lint
        run: |
          echo "::group::Ruff linting output"
          uv run ruff check src/ tests/ --output-format=github
          echo "::endgroup::"

      - name: 📊 Upload Ruff results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ruff-lint-results
          path: |
            .ruff_cache/
          if-no-files-found: ignore
          retention-days: 7

  quality-ruff-format:
    name: 🎯 Quality • Ruff Formatting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: '**/pyproject.toml'

      - name: 🔧 Install dependencies
        run: uv sync --frozen --all-extras

      - name: 🖌️ Check formatting with Ruff
        run: |
          echo "::group::Formatting check"
          uv run ruff format --check src/ tests/ --diff
          echo "::endgroup::"

  quality-mypy:
    name: 🎯 Quality • Type Checking
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: '**/pyproject.toml'

      - name: 🔧 Install dependencies
        run: uv sync --frozen --all-extras

      - name: 🔍 Run mypy type checking
        run: |
          echo "::group::MyPy output"
          uv run mypy src/ --show-column-numbers --show-error-context --pretty
          echo "::endgroup::"

      - name: 📊 Generate mypy report
        if: always()
        run: |
          uv run mypy src/ --html-report mypy-report --any-exprs-report mypy-report || true

      - name: 📤 Upload mypy report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: mypy-html-report
          path: mypy-report/
          if-no-files-found: ignore
          retention-days: 7

  # ============================================================================
  # 🛡️ Security Scanning
  # ============================================================================

  security-bandit:
    name: 🛡️ Security • Bandit Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: '**/pyproject.toml'

      - name: 🔧 Install dependencies
        run: uv sync --frozen --all-extras

      - name: 🔒 Run Bandit security scan
        run: |
          echo "::group::Bandit security analysis"
          uv run bandit -r src/ -ll -f json -o bandit-report.json
          uv run bandit -r src/ -ll
          echo "::endgroup::"

      - name: 📊 Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json
          retention-days: 30

  security-secrets:
    name: 🛡️ Security • Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install detect-secrets
        run: pip install detect-secrets

      - name: 🔐 Scan for secrets
        run: |
          echo "::group::Secrets detection"
          # Scan and verify against baseline (non-interactive)
          detect-secrets scan --baseline .secrets.baseline
          # Check if any real secrets are found
          if detect-secrets scan --baseline .secrets.baseline | grep -q "no secrets detected"; then
            echo "✅ No secrets detected"
          else
            echo "⚠️ Potential secrets detected - please review .secrets.baseline"
          fi
          echo "::endgroup::"

  security-dependencies:
    name: 🛡️ Security • Dependency Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: '**/pyproject.toml'

      - name: 🔧 Install pip-audit
        run: pip install pip-audit

      - name: 🛡️ Check dependencies for vulnerabilities
        run: |
          echo "::group::Dependency vulnerability scan"
          uv pip compile pyproject.toml -o requirements.txt
          pip-audit -r requirements.txt --desc
          echo "::endgroup::"

  # ============================================================================
  # 🧪 Testing Matrix
  # ============================================================================

  test-matrix:
    name: 🧪${{ matrix.os-emoji }} ${{ matrix.os-name }} • Py${{ matrix.python }}
    needs: [quality-ruff-lint, quality-ruff-format, quality-mypy]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            os-name: Linux
            os-emoji: 🐧
            python: '3.13'
            coverage: true
          - os: windows-2022
            os-name: Windows
            os-emoji: 🪟
            python: '3.13'
            coverage: false
          - os: macos-13
            os-name: macOS
            os-emoji: 🍎
            python: '3.13'
            coverage: false
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: '**/pyproject.toml'

      - name: 🔧 Install dependencies
        run: uv sync --frozen --all-extras

      - name: 🧪 Run tests with coverage
        if: matrix.coverage
        shell: bash
        run: |
          echo "::group::Test execution with coverage"
          uv run pytest tests/ \
            --cov=src/media_audit \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing:skip-covered \
            --junitxml=junit.xml \
            -v
          echo "::endgroup::"

      - name: 🧪 Run tests without coverage
        if: '!matrix.coverage'
        shell: bash
        run: |
          echo "::group::Test execution"
          uv run pytest tests/ \
            --junitxml=junit.xml \
            -v
          echo "::endgroup::"

      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python }}
          path: |
            junit.xml
            htmlcov/
            coverage.xml
          retention-days: 7

      - name: 📈 Coverage report
        if: matrix.coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.os }}-py${{ matrix.python }}
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  # ============================================================================
  # 🧪 Python 3.14 Experimental Testing (Dead-end branch)
  # ============================================================================

  experimental-py314:
    name: 🧪 Python 3.14 (Experimental)
    needs: [quality-ruff-lint, quality-ruff-format, quality-mypy]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    continue-on-error: true  # Don't fail the whole CI if this fails
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python 3.14
        uses: actions/setup-python@v5
        with:
          python-version: '3.14.0-alpha.1'
          allow-prereleases: true

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: '**/pyproject.toml'

      - name: 🔧 Install dependencies
        run: uv sync --frozen --all-extras

      - name: 🧪 Run tests
        shell: bash
        run: |
          echo "::group::Test execution on Python 3.14"
          uv run pytest tests/ -v || echo "::warning::Python 3.14 tests failed (experimental)"
          echo "::endgroup::"

  # ============================================================================
  # 🏗️ Build Verification
  # ============================================================================

  build-package:
    name: 🏗️ Build • Distribution Package
    needs: [quality-ruff-lint, quality-ruff-format, quality-mypy]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: '**/pyproject.toml'

      - name: 🏗️ Build package
        run: |
          echo "::group::Building distribution"
          uv build
          echo "::endgroup::"
          echo "::group::Package contents"
          ls -la dist/
          echo "::endgroup::"

      - name: 🔍 Check package with twine
        run: |
          pip install twine
          echo "::group::Twine check"
          twine check dist/*
          echo "::endgroup::"

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distribution-packages
          path: dist/
          retention-days: 7

  # ============================================================================
  # 🎯 Pre-commit Validation
  # ============================================================================

  pre-commit-check:
    name: 🪝 Validation • Pre-commit Hooks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: '**/pyproject.toml'

      - name: 📦 Install dependencies
        run: |
          uv pip install --system -e ".[dev]"

      - name: 🪝 Run pre-commit hooks
        run: |
          # Skip Node.js-based tools that may have npm registry issues
          SKIP=prettier,markdownlint,cspell,markdown-link-check,mkdocs-build,pytest pre-commit run --all-files --verbose

  # ============================================================================
  # 📊 Results Summary
  # ============================================================================

  ci-summary:
    name: ✅ CI Summary
    if: always()
    needs:
      - quality-ruff-lint
      - quality-ruff-format
      - quality-mypy
      - security-bandit
      - security-secrets
      - security-dependencies
      - test-matrix
      - build-package
      - pre-commit-check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Check job results
        id: check-results
        run: |
          # Function to check job result
          check_job() {
            local job_name="$1"
            local job_result="$2"
            local emoji="$3"

            if [ "$job_result" == "success" ]; then
              echo "$emoji ✅ $job_name: Success"
              return 0
            elif [ "$job_result" == "skipped" ]; then
              echo "$emoji ⏭️ $job_name: Skipped"
              return 0
            else
              echo "$emoji ❌ $job_name: Failed"
              return 1
            fi
          }

          # Initialize success flag
          all_success=true

          # Check all job results
          echo "## 📊 CI Pipeline Results"
          echo ""
          echo "### 🎯 Quality Gates"
          check_job "Ruff Linting" "${{ needs.quality-ruff-lint.result }}" "🎨" || all_success=false
          check_job "Ruff Formatting" "${{ needs.quality-ruff-format.result }}" "🖌️" || all_success=false
          check_job "Type Checking" "${{ needs.quality-mypy.result }}" "🔍" || all_success=false
          echo ""
          echo "### 🛡️ Security"
          check_job "Security Analysis" "${{ needs.security-bandit.result }}" "🔒" || all_success=false
          check_job "Secrets Detection" "${{ needs.security-secrets.result }}" "🔐" || all_success=false
          check_job "Dependency Audit" "${{ needs.security-dependencies.result }}" "🛡️" || all_success=false
          echo ""
          echo "### 🧪 Testing"
          check_job "Test Suite" "${{ needs.test-matrix.result }}" "🧪" || all_success=false
          echo ""
          echo "### 🏗️ Build"
          check_job "Package Build" "${{ needs.build-package.result }}" "📦" || all_success=false
          echo ""
          echo "### 🪝 Validation"
          check_job "Pre-commit Hooks" "${{ needs.pre-commit-check.result }}" "🪝" || all_success=false
          echo ""

          # Set overall status
          if [ "$all_success" = true ]; then
            echo "## ✅ All checks passed successfully!"
            echo "ci_status=success" >> "$GITHUB_OUTPUT"
          else
            echo "## ❌ Some checks failed. Please review the results above."
            echo "ci_status=failure" >> "$GITHUB_OUTPUT"
            exit 1
          fi

      - name: 💬 Comment PR results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');

            // Get job statuses
            const jobs = {
              'quality-ruff-lint': '${{ needs.quality-ruff-lint.result }}',
              'quality-ruff-format': '${{ needs.quality-ruff-format.result }}',
              'quality-mypy': '${{ needs.quality-mypy.result }}',
              'security-bandit': '${{ needs.security-bandit.result }}',
              'security-secrets': '${{ needs.security-secrets.result }}',
              'security-dependencies': '${{ needs.security-dependencies.result }}',
              'test-matrix': '${{ needs.test-matrix.result }}',
              'build-package': '${{ needs.build-package.result }}',
              'pre-commit-check': '${{ needs.pre-commit-check.result }}'
            };

            // Function to get emoji for status
            function getStatusEmoji(status) {
              switch(status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '🚫';
                case 'skipped': return '⏭️';
                default: return '⏳';
              }
            }

            // Build comment body
            let comment = `## 🚀 CI Pipeline Results\n\n`;
            comment += `Run: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n`;

            // Quality section
            comment += `### 🎯 Quality Gates\n`;
            comment += `| Check | Status |\n`;
            comment += `|-------|--------|\n`;
            comment += `| 🎨 Ruff Linting | ${getStatusEmoji(jobs['quality-ruff-lint'])} |\n`;
            comment += `| 🖌️ Ruff Formatting | ${getStatusEmoji(jobs['quality-ruff-format'])} |\n`;
            comment += `| 🔍 Type Checking | ${getStatusEmoji(jobs['quality-mypy'])} |\n`;
            comment += `\n`;

            // Security section
            comment += `### 🛡️ Security\n`;
            comment += `| Check | Status |\n`;
            comment += `|-------|--------|\n`;
            comment += `| 🔒 Security Analysis | ${getStatusEmoji(jobs['security-bandit'])} |\n`;
            comment += `| 🔐 Secrets Detection | ${getStatusEmoji(jobs['security-secrets'])} |\n`;
            comment += `| 🛡️ Dependency Audit | ${getStatusEmoji(jobs['security-dependencies'])} |\n`;
            comment += `\n`;

            // Testing section
            comment += `### 🧪 Testing & Build\n`;
            comment += `| Check | Status |\n`;
            comment += `|-------|--------|\n`;
            comment += `| 🧪 Test Suite | ${getStatusEmoji(jobs['test-matrix'])} |\n`;
            comment += `| 📦 Package Build | ${getStatusEmoji(jobs['build-package'])} |\n`;
            comment += `| 🪝 Pre-commit Hooks | ${getStatusEmoji(jobs['pre-commit-check'])} |\n`;
            comment += `\n`;

            // Overall status
            const allSuccess = Object.values(jobs).every(status =>
              status === 'success' || status === 'skipped'
            );

            if (allSuccess) {
              comment += `### ✅ All checks passed successfully!\n`;
            } else {
              comment += `### ❌ Some checks require attention\n`;
              comment += `Please review the failed checks above and make necessary corrections.\n`;
            }

            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('🚀 CI Pipeline Results')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: 🎉 Success notification
        if: steps.check-results.outputs.ci_status == 'success'
        run: |
          echo "::notice::✅ All CI checks passed successfully!"

      - name: ⚠️ Failure notification
        if: steps.check-results.outputs.ci_status == 'failure'
        run: |
          echo "::error::❌ CI pipeline failed. Please check the job results for details."
          exit 1
