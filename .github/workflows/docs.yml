name: Docs

on:
  push:
    branches: [main]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'src/**/*.py'  # Rebuild docs when source code changes (for API docs)
      - '.github/workflows/docs.yml'
      - 'pyproject.toml'  # In case doc dependencies change
      - 'README.md'

  pull_request:
    branches: [main]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'src/**/*.py'
      - '.github/workflows/docs.yml'
      - 'pyproject.toml'
      - 'README.md'

  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to GitHub Pages'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "docs-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}"
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  PYTHON_VERSION: '3.13'
  UV_VERSION: '0.4.18'
  UV_CACHE_DIR: .uv-cache
  PYTHONUNBUFFERED: '1'
  FORCE_COLOR: '1'

jobs:
  # ============================================================================
  # 📝 Documentation Quality Checks - Run in parallel using matrix
  # ============================================================================

  quality-checks:
    name: ${{ matrix.check.name }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        check:
          - name: "📝 Markdown Lint"
            id: "markdown-lint"
            cmd: "npx markdownlint docs/**/*.md README.md --config .markdownlint.yml"
            setup: "npm"

          - name: "🔤 Spell Check"
            id: "spell-check"
            cmd: "npx cspell 'docs/**/*.md' 'README.md' --config .cspell.json --no-progress"
            setup: "npm"

          - name: "🔗 Link Check"
            id: "link-check"
            cmd: "npx markdown-link-check docs/**/*.md README.md --config .markdown-link-check.json --quiet"
            setup: "npm"

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        if: matrix.check.setup == 'npm'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Get npm cache directory
        if: matrix.check.setup == 'npm'
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Cache npm dependencies
        if: matrix.check.setup == 'npm'
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-npm-${{ matrix.check.id }}-${{ hashFiles('**/package-lock.json', '.markdownlint.yml', '.cspell.json', '.markdown-link-check.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ matrix.check.id }}-
            ${{ runner.os }}-npm-

      - name: Install dependencies
        if: matrix.check.setup == 'npm'
        run: |
          if [ "${{ matrix.check.id }}" == "markdown-lint" ]; then
            npm install --no-save markdownlint-cli@^0.41.0
          elif [ "${{ matrix.check.id }}" == "spell-check" ]; then
            npm install --no-save cspell@^8.0.0
          elif [ "${{ matrix.check.id }}" == "link-check" ]; then
            npm install --no-save markdown-link-check@^3.12.0
          fi

      - name: Run ${{ matrix.check.name }}
        id: check
        continue-on-error: ${{ github.event_name == 'pull_request' }}
        run: ${{ matrix.check.cmd }}

      - name: Report status
        if: always()
        run: |
          if [ "${{ steps.check.outcome }}" == "success" ]; then
            echo "✅ ${{ matrix.check.name }} passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ ${{ matrix.check.name }} failed" >> $GITHUB_STEP_SUMMARY
          fi

  # ============================================================================
  # 🔨 Build Documentation
  # ============================================================================

  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality-checks]
    if: always() && !cancelled()

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history for git info in docs

      - name: Setup Python with uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --frozen --extra docs
          uv pip list

      - name: Cache MkDocs build
        uses: actions/cache@v4
        with:
          path: |
            .cache
            site
          key: mkdocs-${{ runner.os }}-${{ hashFiles('mkdocs.yml', 'docs/**/*.md', 'src/**/*.py') }}
          restore-keys: |
            mkdocs-${{ runner.os }}-

      - name: Build documentation
        run: |
          echo "::group::Building MkDocs documentation"
          uv run mkdocs build --strict --verbose
          echo "::endgroup::"

      - name: Check built documentation
        run: |
          echo "::group::Documentation statistics"
          echo "Files generated: $(find site -type f | wc -l)"
          echo "Total size: $(du -sh site | cut -f1)"
          echo "HTML files: $(find site -name '*.html' | wc -l)"
          echo "::endgroup::"

      - name: Test documentation server
        run: |
          # Start server in background
          uv run python -m http.server 8000 --directory site &
          SERVER_PID=$!

          # Wait for server to start
          for i in {1..10}; do
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:8000 | grep -q "200"; then
              echo "✅ Documentation server is running"
              break
            fi
            sleep 1
          done

          # Clean up
          kill $SERVER_PID 2>/dev/null || true

      - name: Upload documentation artifact
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: site/
          retention-days: 7
          compression-level: 9

      - name: Generate build report
        if: always()
        run: |
          {
            echo "## 📚 Documentation Build Report"
            echo ""
            echo "| Metric | Value |"
            echo "|--------|-------|"
            echo "| Status | ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }} |"
            echo "| MkDocs Version | $(uv run mkdocs --version) |"
            echo "| Files Generated | $(find site -type f 2>/dev/null | wc -l) |"
            echo "| HTML Files | $(find site -name '*.html' 2>/dev/null | wc -l) |"
            echo "| Total Size | $(du -sh site 2>/dev/null | cut -f1) |"
            echo "| Build Time | ${SECONDS}s |"
            echo ""

            if [ "${{ github.event_name }}" == "pull_request" ]; then
              echo "> 📋 This is a PR build. Documentation will be deployed when merged to main."
            elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
              echo "> 🚀 Documentation will be deployed to GitHub Pages."
            fi
          } >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # 🚀 Deploy to GitHub Pages
  # ============================================================================

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build]
    if: |
      github.event_name == 'push' && github.ref == 'refs/heads/main' ||
      github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'true'

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v5
        with:
          name: documentation
          path: ./site

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v4
        with:
          path: ./site

      - name: Deploy to Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Report deployment
        if: always()
        run: |
          {
            echo "## 🚀 GitHub Pages Deployment"
            echo ""
            echo "| Status | URL |"
            echo "|--------|-----|"
            echo "| ${{ job.status == 'success' && '✅ Deployed' || '❌ Failed' }} | ${{ steps.deployment.outputs.page_url }} |"
            echo ""
            echo "Deployed at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          } >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # 📊 PR Comment with Results
  # ============================================================================

  pr-comment:
    name: PR Documentation Report
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [quality-checks, build]
    if: github.event_name == 'pull_request' && always()

    steps:
      - name: Comment PR with results
        uses: actions/github-script@v7
        with:
          script: |
            const qualityChecks = ${{ toJSON(needs.quality-checks) }};
            const buildResult = '${{ needs.build.result }}';

            let comment = '## 📚 Documentation Check Results\n\n';

            // Quality checks status
            comment += '### Quality Checks\n';
            comment += '| Check | Status |\n';
            comment += '|-------|--------|\n';

            const checkResults = {
              'markdown-lint': qualityChecks.result === 'success' ? '✅' : '⚠️',
              'spell-check': qualityChecks.result === 'success' ? '✅' : '⚠️',
              'link-check': qualityChecks.result === 'success' ? '✅' : '⚠️'
            };

            for (const [check, status] of Object.entries(checkResults)) {
              comment += `| ${check.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase())} | ${status} |\n`;
            }

            // Build status
            comment += '\n### Build Status\n';
            const buildIcon = buildResult === 'success' ? '✅' : buildResult === 'failure' ? '❌' : '⚠️';
            comment += `${buildIcon} Documentation build: **${buildResult}**\n\n`;

            // Summary
            if (buildResult === 'success' && qualityChecks.result === 'success') {
              comment += '> 🎉 All documentation checks passed! Ready for review.';
            } else if (buildResult === 'failure') {
              comment += '> ❌ Documentation build failed. Please check the logs for details.';
            } else {
              comment += '> ⚠️ Some quality checks have warnings. Please review but not blocking.';
            }

            // Find and update or create comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('Documentation Check Results')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
